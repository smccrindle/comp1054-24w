@charset "utf-8";

html {
		box-sizing: border-box;
}
*, *:before, *:after {
	box-sizing: inherit;
}

body {
	background: #CCC;
}

#container {
	border: 5px dotted red;
	background: #FCC;
	width: 80%;
	margin: 0 auto;
	/* STEP 1: Set the container to display: grid; */
	display: grid;
	/* STEP 7: Plot out the grid-template-areas */
	grid-template-areas:
			"header header header"
			"nav section aside"
			"footer footer footer";
	/* STEP 8: Control the width of the grid rows */
	grid-template-rows: auto auto auto;
	/* STEP 9: Control the width of the grid columns */
	grid-template-columns: 1fr 3fr 1fr;
	/* STEP 10b: Set the grid-gap */
	grid-gap: 1rem;
}

header {
	border: 5px dotted blue;
	background: #CCF;
	/* STEP 2: Identify the header as a grid-area */
	grid-area: header;
	/* STEP 11a: Fix the <header> - set display: flex; to have the <h1> and the <nav> sit beside each other */
	display: flex;
	/* STEP 11b: Set them at either end of the <header> with justify-content: space-between; */
	justify-content: space-between;
}

header nav ul {
	list-style-type: none;
	padding: 0;
}

header nav ul li {
	display: inline;
}

#container > nav {
	border: 5px dotted green;
	background: #CFC;
	/* STEP 3: Identify the nav as a grid-area */
	grid-area: nav;
}

section {
	border: 5px dotted darkorange;
	background: #FC9;
	/* STEP 4: Identify the section as a grid-area */
	grid-area: section;
}

aside {
	border: 5px dotted purple;
	background: #C9C;
	/* STEP 5: Identify the aside as a grid-area */
	grid-area: aside;
}

footer {
	border: 5px dotted orange;
	background: #FF9;
	/* STEP 6: Identify the footer as a grid-area */
	grid-area: footer;
}

header,
#container > nav,
#container > section,
#container > aside,
footer {
    /* STEP 10a: add some padding to the main layout containers to give the text some room to breathe - see the effect in the browser, then comment this out and head up to the #container rule for an alternative */
    /* padding: 1rem; */
}
